// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCANOPTIONS_ORG_APACHE_ARROW_FLATBUF_H_
#define FLATBUFFERS_GENERATED_SCANOPTIONS_ORG_APACHE_ARROW_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

#include "Schema_generated.h"

namespace org {
namespace apache {
namespace arrow {
namespace flatbuf {

struct ScanOptions;
struct ScanOptionsBuilder;

struct ScanOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ScanOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILTER_EXPRESSION = 4,
    VT_PARTITION_EXPRESSION = 6,
    VT_PROJECTION_SCHEMA = 8,
    VT_DATASET_SCHEMA = 10
  };
  const org::apache::arrow::flatbuf::Buffer *filter_expression() const {
    return GetStruct<const org::apache::arrow::flatbuf::Buffer *>(VT_FILTER_EXPRESSION);
  }
  const org::apache::arrow::flatbuf::Buffer *partition_expression() const {
    return GetStruct<const org::apache::arrow::flatbuf::Buffer *>(VT_PARTITION_EXPRESSION);
  }
  const org::apache::arrow::flatbuf::Buffer *projection_schema() const {
    return GetStruct<const org::apache::arrow::flatbuf::Buffer *>(VT_PROJECTION_SCHEMA);
  }
  const org::apache::arrow::flatbuf::Buffer *dataset_schema() const {
    return GetStruct<const org::apache::arrow::flatbuf::Buffer *>(VT_DATASET_SCHEMA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<org::apache::arrow::flatbuf::Buffer>(verifier, VT_FILTER_EXPRESSION) &&
           VerifyField<org::apache::arrow::flatbuf::Buffer>(verifier, VT_PARTITION_EXPRESSION) &&
           VerifyField<org::apache::arrow::flatbuf::Buffer>(verifier, VT_PROJECTION_SCHEMA) &&
           VerifyField<org::apache::arrow::flatbuf::Buffer>(verifier, VT_DATASET_SCHEMA) &&
           verifier.EndTable();
  }
};

struct ScanOptionsBuilder {
  typedef ScanOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filter_expression(const org::apache::arrow::flatbuf::Buffer *filter_expression) {
    fbb_.AddStruct(ScanOptions::VT_FILTER_EXPRESSION, filter_expression);
  }
  void add_partition_expression(const org::apache::arrow::flatbuf::Buffer *partition_expression) {
    fbb_.AddStruct(ScanOptions::VT_PARTITION_EXPRESSION, partition_expression);
  }
  void add_projection_schema(const org::apache::arrow::flatbuf::Buffer *projection_schema) {
    fbb_.AddStruct(ScanOptions::VT_PROJECTION_SCHEMA, projection_schema);
  }
  void add_dataset_schema(const org::apache::arrow::flatbuf::Buffer *dataset_schema) {
    fbb_.AddStruct(ScanOptions::VT_DATASET_SCHEMA, dataset_schema);
  }
  explicit ScanOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScanOptionsBuilder &operator=(const ScanOptionsBuilder &);
  flatbuffers::Offset<ScanOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ScanOptions>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScanOptions> CreateScanOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    const org::apache::arrow::flatbuf::Buffer *filter_expression = 0,
    const org::apache::arrow::flatbuf::Buffer *partition_expression = 0,
    const org::apache::arrow::flatbuf::Buffer *projection_schema = 0,
    const org::apache::arrow::flatbuf::Buffer *dataset_schema = 0) {
  ScanOptionsBuilder builder_(_fbb);
  builder_.add_dataset_schema(dataset_schema);
  builder_.add_projection_schema(projection_schema);
  builder_.add_partition_expression(partition_expression);
  builder_.add_filter_expression(filter_expression);
  return builder_.Finish();
}

inline const org::apache::arrow::flatbuf::ScanOptions *GetScanOptions(const void *buf) {
  return flatbuffers::GetRoot<org::apache::arrow::flatbuf::ScanOptions>(buf);
}

inline const org::apache::arrow::flatbuf::ScanOptions *GetSizePrefixedScanOptions(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<org::apache::arrow::flatbuf::ScanOptions>(buf);
}

inline bool VerifyScanOptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<org::apache::arrow::flatbuf::ScanOptions>(nullptr);
}

inline bool VerifySizePrefixedScanOptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<org::apache::arrow::flatbuf::ScanOptions>(nullptr);
}

inline void FinishScanOptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::ScanOptions> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedScanOptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::ScanOptions> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuf
}  // namespace arrow
}  // namespace apache
}  // namespace org

#endif  // FLATBUFFERS_GENERATED_SCANOPTIONS_ORG_APACHE_ARROW_FLATBUF_H_
